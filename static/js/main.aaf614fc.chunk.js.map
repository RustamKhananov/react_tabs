{"version":3,"sources":["App.js","index.js"],"names":["App","state","mainGameField","zeros","gameOver","setState","i","setTimeout","prevState","nextMainGameField","addNewField","playerWins","handleKeyDown","event","console","log","key","preventDefault","plusZeros","tempArr","push","sort","a","b","i2","splice","unshift","tempColumnArr","i3","countOfZeros","randomOfZeros","Math","ceil","random","this","className","onKeyDown","onTouchMove","tabIndex","map","row","rowIndex","cell","columnIndex","React","Component","ReactDOM","render","document","getElementById","querySelector","focus"],"mappings":"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","file":"static/js/main.aaf614fc.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n  state = {\n    mainGameField: [[0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],],\n    zeros: 16,\n\n  }\n\n  gameOver = () => {\n    this.setState({\n      mainGameField: [[0, 0, 0, 0],\n      ['G', 'A', 'M', 'E'],\n      ['O', 'V', 'E', 'R'],\n      [0, 0, 0, 0],],\n    });\n    for (let i = 0; i < 6; i++) {\n      setTimeout(() => {\n        this.setState(prevState => {\n          let nextMainGameField = [...prevState.mainGameField];\n          nextMainGameField[3][0] = 5 - i;\n          return ({\n            mainGameField: nextMainGameField\n          })\n        })\n      }, 1000 * i)\n    }\n    setTimeout(() => {\n      this.setState({\n        mainGameField: [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],],\n        zeros: 16,\n      });\n      this.addNewField();\n    }, 6000)\n\n  }\n\n  playerWins = () => {\n    this.setState({\n      mainGameField: [[0, 0, 0, 0],\n      ['Y', 'O', 'U', 0],\n      ['W', 'I', 'N', 0],\n      [0, 0, 0, 0],],\n    });\n    for (let i = 0; i < 10; i++) {\n      setTimeout(() => {\n        this.setState(prevState => {\n          let nextMainGameField = [...prevState.mainGameField];\n          nextMainGameField[3][0] = 10 - i;\n          return ({\n            mainGameField: nextMainGameField\n          })\n        })\n      }, 1000 * i)\n    }\n    setTimeout(() => {\n      this.setState({\n        mainGameField: [[0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],],\n        zeros: 16,\n      });\n      this.addNewField();\n    }, 10000)\n  }\n\n\n  handleKeyDown = (event) => {\n    console.log(event.key)\n    event.preventDefault();\n    if (event.key === 'ArrowRight') {\n      this.setState(prevState => {\n\n        let plusZeros = 0;\n        let tempArr = [];\n\n        for (let i = 0; i < 4; i++) {\n          tempArr.push([...prevState.mainGameField[i]]);\n          tempArr[i].sort((a, b) => {\n            if (a === 0 & b !== 0) {\n              return -1\n            }\n            if (a !== 0 & b !== 0) {\n              return 0\n            }\n            if (a !== 0 & b === 0) {\n              return 1\n            }\n            return 0;\n          });\n          console.log('1', prevState)\n          for (let i2 = 3; i2 > 0; i2--) {\n            if (tempArr[i][i2] === tempArr[i][i2 - 1]\n              && tempArr[i][i2] !== 0) {\n              tempArr[i][i2] = tempArr[i][i2] * 2;\n              if(tempArr[i][i2]===2048) {\n                this.playerWins();\n              }\n              tempArr[i].splice(i2 - 1, 1);\n              tempArr[i].unshift(0);\n              plusZeros++;\n\n            };\n          }\n\n\n        }\n\n        return ({\n          mainGameField: [...tempArr],\n          zeros: prevState.zeros + plusZeros\n        })\n      });\n      setTimeout(this.addNewField, 500);\n    }\n\n    if (event.key === 'ArrowLeft') {\n      this.setState(prevState => {\n        console.log('1', prevState)\n        let plusZeros = 0;\n        let tempArr = [];\n\n        for (let i = 0; i < 4; i++) {\n          tempArr.push([...prevState.mainGameField[i]]);\n          tempArr[i].sort((a, b) => {\n            if (a === 0 & b !== 0) {\n              return 1\n            }\n            if (a !== 0 & b !== 0) {\n              return 0\n            }\n            if (a !== 0 & b === 0) {\n              return -1\n            }\n            return 0;\n          });\n\n          for (let i2 = 0; i2 < 3; i2++) {\n            if (tempArr[i][i2] === tempArr[i][i2 + 1]\n              && tempArr[i][i2] !== 0) {\n              tempArr[i][i2] = tempArr[i][i2] * 2;\n              if(tempArr[i][i2]===2048) {\n                this.playerWins();\n              }\n              tempArr[i].splice(i2 + 1, 1);\n              tempArr[i].push(0);\n              plusZeros++;\n\n            };\n          }\n\n\n        }\n\n        return ({\n          mainGameField: [...tempArr],\n          zeros: prevState.zeros + plusZeros\n        })\n      });\n      setTimeout(this.addNewField, 500);\n    }\n\n    if (event.key === 'ArrowDown') {\n\n      this.setState(prevState => {\n        let plusZeros = 0;\n        let tempArr = [...prevState.mainGameField];\n\n        for (let i = 0; i < 4; i++) {\n          let tempColumnArr = [];\n          for (let i3 = 0; i3 < 4; i3++) {\n            tempColumnArr.push(prevState.mainGameField[i3][i]);\n            console.log(tempColumnArr)\n          };\n\n          tempColumnArr.sort((a, b) => {\n            if (a === 0 & b !== 0) {\n              return -1\n            }\n            if (a !== 0 & b !== 0) {\n              return 0\n            }\n            if (a !== 0 & b === 0) {\n              return 1\n            }\n            return 0;\n          });\n\n          for (let i2 = 0; i2 < 3; i2++) {\n            if (tempColumnArr[i2] === tempColumnArr[i2 + 1]\n              && tempColumnArr[i2] !== 0) {\n              tempColumnArr[i2 + 1] = tempColumnArr[i2] * 2;\n              if(tempColumnArr[i2 + 1]===2048) {\n                this.playerWins();\n              }\n              tempColumnArr.splice(i2, 1);\n              tempColumnArr.unshift(0);\n              plusZeros++;\n            };\n          }\n\n          for (let i2 = 0; i2 < 4; i2++) {\n            tempArr[i2][i] = tempColumnArr[i2]\n          }\n\n\n        }\n\n        return ({\n          mainGameField: [...tempArr],\n          zeros: prevState.zeros + plusZeros\n        })\n      });\n      setTimeout(this.addNewField, 500);\n    }\n\n    if (event.key === 'ArrowUp') {\n\n      this.setState(prevState => {\n        let plusZeros = 0;\n        let tempArr = [...prevState.mainGameField];\n\n        for (let i = 0; i < 4; i++) {\n          let tempColumnArr = [];\n          for (let i3 = 0; i3 < 4; i3++) {\n            tempColumnArr.push(prevState.mainGameField[i3][i]);\n            console.log(tempColumnArr)\n          };\n\n          tempColumnArr.sort((a, b) => {\n            if (a === 0 & b !== 0) {\n              return 1;\n            }\n            if (a !== 0 & b !== 0) {\n              return 0;\n            }\n            if (a !== 0 & b === 0) {\n              return -1\n            }\n            return 0;\n          });\n\n          for (let i2 = 0; i2 < 3; i2++) {\n            if (tempColumnArr[i2] === tempColumnArr[i2 + 1]\n              && tempColumnArr[i2] !== 0) {\n              tempColumnArr[i2] = tempColumnArr[i2] * 2;\n              if(tempColumnArr[i2]===2048) {\n                this.playerWins();\n              }\n              tempColumnArr.splice(i2 + 1, 1);\n              tempColumnArr.push(0);\n              plusZeros++;\n            };\n          }\n\n          for (let i2 = 0; i2 < 4; i2++) {\n            tempArr[i2][i] = tempColumnArr[i2]\n          }\n\n\n        }\n\n        return ({\n          mainGameField: [...tempArr],\n          zeros: prevState.zeros + plusZeros\n        })\n      });\n      setTimeout(this.addNewField, 500);\n    }\n\n\n  }\n\n  addNewField = () => {\n    if (this.state.zeros === 0) {\n      this.gameOver();\n    } else {\n      let countOfZeros = 0;\n      let randomOfZeros = Math.ceil(Math.random() * this.state.zeros);\n      for (let i = 0; i < 4; i++) {\n        for (let i2 = 0; i2 < 4; i2++) {\n          if (this.state.mainGameField[i][i2] === 0) {\n            countOfZeros++;\n            if (countOfZeros === randomOfZeros) {\n              let nextMainGameField = [...this.state.mainGameField];\n              nextMainGameField[i][i2] = 2;\n              this.setState(prevState => {\n                console.log('2', prevState)\n                return ({\n\n                  mainGameField: [...nextMainGameField],\n                  zeros: prevState.zeros - 1\n                }\n                )\n              })\n            }\n          };\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.addNewField();\n  }\n\n  render() {\n    return (\n      <div className=\"game2048\">\n        <h1 className=\"game2048__title\">2048</h1>\n\n\n        <p className=\"game2048__rulesEng\">\n          <strong>HOW TO PLAY:</strong> Use your arrow keys to move\n          the tiles. When two tiles with the same\n          number touch, they merge into one!\n          </p>\n        <p className=\"game2048__rulesUkr\">\n          <strong>ЯК ГРАТИ:</strong> Для переміщення блоків\n          використовуйте клавіші зі стрілками. Коли два\n          блоки з однаковим номером зтикаються, вони зливаються в один сумарний!\n        </p>\n\n        <div className=\"game2048__container\"\n          onKeyDown={this.handleKeyDown}\n          onTouchMove={this.handleKeyDown}\n          tabIndex=\"0\">\n          {this.state.mainGameField.map((row, rowIndex) => (\n\n            <ul key={rowIndex} className=\"game2048__row\">\n              {row.map((cell, columnIndex) => (\n                <li key={`${rowIndex}, ${columnIndex}`} className={`game2048__cell game2048__cell--${cell}`}>{cell === 0 ? '' : cell}</li>\n              ))\n\n              }\n            </ul>\n\n          ))\n\n          }\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\ndocument.querySelector('.game2048__container').focus();\n"],"sourceRoot":""}